// Generated by CoffeeScript 1.6.3
var StylusCompiler, exec, fs, nib, progeny, spawn, sprite, stylus, sysPath, _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

_ref = require('child_process'), spawn = _ref.spawn, exec = _ref.exec;

nib = require('nib');

fs = require('fs');

stylus = require('stylus');

sysPath = require('path');

sprite = require('node-sprite');

progeny = require('progeny');

module.exports = StylusCompiler = (function() {
  StylusCompiler.prototype.brunchPlugin = true;

  StylusCompiler.prototype.type = 'stylesheet';

  StylusCompiler.prototype.extension = 'styl';

  function StylusCompiler(config) {
    var _ref1, _ref2,
      _this = this;
    this.config = config;
    this.getCompiler = __bind(this.getCompiler, this);
    this.compile = __bind(this.compile, this);
    if (this.config.stylus) {
      console.warn("Warning: config.stylus is deprecated, move it to config.plugins.stylus");
      this.cfg = this.config.stylus;
    } else {
      this.cfg = ((_ref1 = this.config.plugins) != null ? _ref1.stylus : void 0) != null ? this.config.plugins.stylus : {};
    }
    if (this.cfg.spriting) {
      this.iconPath = (_ref2 = this.cfg.iconPath) != null ? _ref2 : sysPath.join('images', 'icons');
      this.iconPathFull = sysPath.join(this.config.paths.assets, this.iconPath);
      if (!fs.existsSync(this.iconPathFull)) {
        console.error("Please make sure that the icon path " + this.iconpath + " exits");
      }
      exec('convert --version', function(error, stdout, stderr) {
        if (error) {
          return console.error("You need to have convert (ImageMagick) on your system for spriting");
        }
      });
    }
    this.getDependencies = progeny({
      rootPath: this.config.paths.root
    });
  }

  StylusCompiler.prototype.compile = function(data, path, callback) {
    var _this = this;
    return this.getCompiler(data, function(compiler) {
      var defines, _ref1, _ref2, _ref3, _ref4;
      compiler = compiler.set('filename', path).set('compress', false).set('firebug', !!_this.cfg.firebug).set('linenos', !!_this.cfg.linenos).include(sysPath.join(_this.config.paths.root)).include(sysPath.dirname(path)).use(nib());
      if (_this.cfg !== {}) {
        defines = (_ref1 = _this.cfg.defines) != null ? _ref1 : {};
        Object.keys(defines).forEach(function(name) {
          return compiler.define(name, defines[name]);
        });
        if ((_ref2 = _this.cfg.paths) != null) {
          _ref2.forEach(function(path) {
            return compiler.include(path);
          });
        }
        if ((_ref3 = _this.cfg.imports) != null) {
          _ref3.forEach(function(relativePath) {
            return compiler["import"](relativePath);
          });
        }
        if ((_ref4 = _this.cfg.plugins) != null) {
          _ref4.forEach(function(pluginName) {
            var handler,
              _this = this;
            handler = function(plugin) {
              return compiler.use(plugin());
            };
            if (typeof define !== "undefined" && define !== null ? define.amd : void 0) {
              return require([pluginName], handler);
            } else {
              return handler(require(pluginName));
            }
          });
        }
      }
      return compiler.render(callback);
    });
  };

  StylusCompiler.prototype.getCompiler = function(data, callback) {
    var cfgopt, options,
      _this = this;
    if (this.cfg.spriting) {
      cfgopt = this.cfg.options;
      options = {
        path: (cfgopt != null ? cfgopt.path : void 0) || this.iconPathFull,
        retina: (cfgopt != null ? cfgopt.retina : void 0) || '-2x',
        padding: (cfgopt != null ? cfgopt.padding : void 0) || 2,
        httpPath: (cfgopt != null ? cfgopt.httpPath : void 0) || '../' + this.iconPath
      };
      return sprite.stylus(options, function(err, helper) {
        return callback(stylus(data).define('sprite', helper.fn));
      });
    } else {
      return callback(stylus(data));
    }
  };

  return StylusCompiler;

})();
